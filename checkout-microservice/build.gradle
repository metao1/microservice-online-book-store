plugins {
    id("org.springframework.boot") version "2.5.2"
    id("io.spring.dependency-management") version '1.0.11.RELEASE'
    id("java")
    id("war")
}

ext {
    hibernatesCacheVersion = '5.4.31.Final'
    springVersion = "5.2.11.RELEASE"
    springBootVersion = '2.5.2'
    servletVersion = '3.1.0'
    springCloudVersion = '3.0.2'
    logbackVersion = '6.4'
    kafkaVersion = '2.6.0'
    lombokVersion = '1.18.16'
    jacksonVersion = '2.12.1'
    confluentVersion = '4.1.0'
    hazelcastJetVersion = '4.3'
    hazelcastSpringVersion = '4.1.1-SNAPSHOT'
    springRetryVersion = '1.3.0'
    jaywayJsonPathVersion = '2.4.0'
    swaggerUIVersion = '1.5.0'
    jedisVersion = '3.5.0'
    mockitoVersion = '3.7.7'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
}


dependencies {
    /* Spring Boot WebFlux */
    implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}") {
        exclude group: 'org.eclipse.jetty'
    }
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"

    /* Hibernates */
    implementation "org.hibernate:hibernate-ehcache:${hibernatesCacheVersion}"

    /* Spring Cloud Config */
    implementation "org.springframework.cloud:spring-cloud-starter-config:${springCloudVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${springCloudVersion}"

    /* JPA */
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"

    implementation 'org.postgresql:postgresql:42.2.11'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.2.RELEASE'

    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation 'org.mockito:mockito-core:3.9.0'

    /* Lombok */
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

}

group = 'com.metao.product.checkout'
version = '0.0.1-SNAPSHOT'
description = 'checkout-service'
sourceCompatibility = '16'


springBoot {
    buildInfo()
}

bootJar {
    archiveName "sentinel-${project.version}.jar"
    launchScript()
}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        compileOnly {
            extendsFrom annotationProcessor
        }
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude module: 'org.eclipse.jetty'
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
