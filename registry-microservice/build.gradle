plugins {
    id("org.springframework.boot") version "2.4.1"
    id("io.spring.dependency-management") version '1.0.10.RELEASE'
    id("java")
    id("war")
}

ext {
    springVersion = '5.2.11.RELEASE'
    springBootVersion = '2.4.1'
    servletVersion = '3.1.0'
    springCloudVersion = '3.0.2'
    logbackVersion = '6.4'
    kafkaVersion = '2.6.0'
    lombokVersion = '1.18.16'
    jacksonVersion = '2.12.1'
    confluentVersion = '4.1.0'
    hazelcastJetVersion = '4.3'
    hazelcastSpringVersion = '4.1.1-SNAPSHOT'
    springRetryVersion = '1.3.0'
    jaywayJsonPathVersion = '2.4.0'
    swaggerUIVersion = '1.5.0'
    jedisVersion = '3.5.0'
    mockitoVersion = '3.7.7'
    hibernatesCacheVersion = '5.4.31.Final'
    gsonVersion = '2.8.6'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
}

dependencies {
    /* Spring Boot WebFlux */
    implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}") {
        exclude group: 'org.eclipse.jetty'
    }
    implementation "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    /* Spring Cloud Config */
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:${springCloudVersion}"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'

    /* Lombok */
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

}

group = 'com.metao.product.registry'
version = '0.0.1-SNAPSHOT'
description = 'registry-service'
sourceCompatibility = '11'


springBoot {
    buildInfo()
}

bootJar {
    archiveName "retails-ms-${project.version}.jar"
    launchScript()
}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        compileOnly {
            extendsFrom annotationProcessor
        }
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude module: 'org.eclipse.jetty'
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
