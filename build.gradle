import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'base'
    id 'idea'
    id 'com.google.cloud.tools.jib' version '3.1.4' apply false
    id 'org.springframework.boot' version '2.6.3' apply false
}

allprojects {
    group 'com.metao.metao.product'
    version = System.getenv('CI_COMMIT_REF_NAME') ? System.getenv('CI_COMMIT_REF_NAME') : "${getCurrentGitBranch()}-${getHostName()}"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
        maven { url 'https://packages.confluent.io/maven/' }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of('17')
            vendor = JvmVendorSpec.ADOPTOPENJDK
        }
    }

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.3'
        }
    }

    configurations.all {
        dependencies {
            annotationProcessor 'org.projectlombok:lombok'
            implementation 'org.projectlombok:lombok'
            // https://stackoverflow.com/questions/53326271/spring-nullable-annotation-generates-unknown-enum-constant-warning
            implementation 'com.google.code.findbugs:jsr305:3.0.2'

            testAnnotationProcessor 'org.projectlombok:lombok'
            testImplementation 'org.projectlombok:lombok'
        }

        exclude group: 'org.slf4j', module: 'slf4j-simple'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage:junit-vintage-engine'

        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def slf4jVersion = dependencyManagement.importedProperties['slf4j.version'] ?: '1.7.32'
            if (details.requested.name == 'log4j') {
                details.useTarget group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jVersion
                details.because "prefer 'log4j-over-slf4j' managed version over any version of 'log4j'"
            }
            if (details.requested.name == 'commons-logging') {
                details.useTarget group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4jVersion
                details.because "prefer 'jcl-over-slf4j' managed version over any version of 'commons-logging'"
            }
            // Be careful when migrating the Avro version. Take care about the the Commerce Hub Gradle plugin,
            // Spring Kafka, Apache Kafka client libs, Confluent Kafka libs and the state on the broker.
            def avroVersion = '1.9.2'
            if (details.requested.name == 'avro') {
                details.useTarget group: 'org.apache.avro', name: 'avro', version: avroVersion
                details.because "prefer 'avro' version ${avroVersion} over any version of 'avro'"
            }
            def confluentVersion = '6.1.1'
            if (details.requested.group == 'io.confluent') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: confluentVersion
                details.because "prefer 'io.confluent' version ${confluentVersion} over any version of 'io.confluent'"
            }
            def mapStructVersion = '1.5.0.Beta1'
            if (details.requested.group == 'org.mapstruct') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: mapStructVersion
                details.because "prefer 'org.mapstruct' version ${mapStructVersion} over any version of 'org.mapstruct'"
            }
            def mapStructSpringVersion = '0.1.0'
            if (details.requested.group == 'org.mapstruct.extensions.spring') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: mapStructSpringVersion
                details.because "prefer 'org.mapstruct.extensions.spring' version ${mapStructSpringVersion} over any version of 'org.mapstruct.extensions.spring'"
            }
            def browscapVersion = '1.3.6'
            if (details.requested.name == 'browscap-java'){
                details.useTarget group: 'com.blueconic', name: 'browscap-java', version: browscapVersion
                details.because "prefer 'browscap-java' managed version over any version of 'browscap-java'"
            }
            def eurekaClientVersion='2.2.2.RELEASE'
            if (details.requested.name == 'spring-cloud-starter-netflix-eureka-client'){
                details.useTarget group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-eureka-client', version: eurekaClientVersion
                details.because "prefer 'spring-cloud-starter-netflix-eureka-client' version ${eurekaClientVersion} managed version over any version of 'spring-cloud-starter-netflix-eureka-client'"
            }
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams true
            showStackTraces true
        }

        doFirst {
            systemProperty 'spring.profiles.active', 'test'
        }

    }

    boolean isSpringProject = gradle.springBootProjects.contains(it.path)

    if (isSpringProject) {
        apply plugin: 'org.springframework.boot'
        apply plugin: 'com.google.cloud.tools.jib'

        dependencies {
            annotationProcessor 'org.mapstruct:mapstruct-processor'
            annotationProcessor 'org.mapstruct.extensions.spring:mapstruct-spring-extensions'
            annotationProcessor 'org.projectlombok:lombok'
            annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.1.0"
            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

            implementation 'org.springframework.boot:spring-boot-starter-validation'
            implementation 'ch.qos.logback:logback-classic'
            implementation 'org.projectlombok:lombok'
            implementation 'org.mapstruct:mapstruct'
            implementation 'org.mapstruct.extensions.spring:mapstruct-spring-annotations'
            implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
            implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

            testImplementation 'org.junit.jupiter:junit-jupiter-api'
            testImplementation 'org.assertj:assertj-core'
            testImplementation 'org.mockito:mockito-core'
            testImplementation 'org.mockito:mockito-junit-jupiter'
            testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.28.0'
        }

        compileJava.dependsOn(processResources)

        jib {
            // credentials should be set from outside like e.g.
            // 'gradle jib -Djib.to.auth.username=$DOCKER_USER -Djib.to.auth.password=$DOCKER_USER_PASSWORD'
            from {
                image = 'gradle:7.3.0-jdk17-alpine'
            }
            to {
                image = "bookstore/${project.name}:${project.version}"
            }
            container {
                jvmFlags = ['-XX:+PrintCommandLineFlags', '-XX:+PrintFlagsFinal',
                            '-XX:+UseG1GC', '-XX:MaxRAMPercentage=90', '-XX:MaxMetaspaceSize=512m',
                            '-XX:+UseStringDeduplication', '-XX:+ExitOnOutOfMemoryError'
                ]
                creationTime = 'USE_CURRENT_TIMESTAMP'
            }
        }
    }
}

def getCurrentGitBranch() {
    def gitBranch = 'unknown-branch'
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
        logger.error('Unable to fetch current GIT branch', e)
    }
    logger.info("Your current GIT branch is {}", gitBranch)
    return gitBranch
}

def static getHostName() {
    return InetAddress.localHost.hostName
}

