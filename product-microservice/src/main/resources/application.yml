server:
  port: ${PORT:8082}

kafka:
  topic:
    payment-order: "payment-test"
    products-response: "products-response"

spring:
#  kafka:
#    # Required connection configs for Kafka producer, consumer, and admin
#    bootstrap-servers: pkc-6ojv2.us-west4.gcp.confluent.cloud:9092
#    # Required connection configs for Confluent Cloud Schema Registry
#    properties:
#      stream-properties:
#        application-id: stock
#        schema.registry.url: https://psrc-kk5gg.europe-west3.gcp.confluent.cloud
#        application.id: stock
#        bootstrap.servers: pkc-6ojv2.us-west4.gcp.confluent.cloud:9092
#      bootstrap-servers: pkc-6ojv2.us-west4.gcp.confluent.cloud:9092
#      schema.registry.url: https://psrc-kk5gg.europe-west3.gcp.confluent.cloud
#      security.protocol: SASL_SSL
#      sasl.mechanism: PLAIN
#      credentials.source: USER_INFO
#      sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username='OIF7NQANRR6MKOLX'   password='FX+y+hbL+0MSur41+rMJpobTv2rHX/UvLOA6DNXyExeHe3OoIVVWG8VrC6IC67tN';
#      schema:
#        registry:
#          url: https://psrc-kk5gg.europe-west3.gcp.confluent.cloud
#          basic:
#            auth:
#              user:
#                info: AC2WDR5L5TFTOKH7:PoTBOmSFbdcMBFnP4GKpaSEpje4INp1jJwXk8SCsJl2IzcpP+Yi/tAF6HxICgSuJ
#      basic:
#        auth:
#          credentials:
#            source: USER_INFO
#            user:
#              info: AC2WDR5L5TFTOKH7:PoTBOmSFbdcMBFnP4GKpaSEpje4INp1jJwXk8SCsJl2IzcpP+Yi/tAF6HxICgSuJ
#    consumer:
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.LongDeserializer
#      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
#      properties:
#        auto.offset.reset: earliest
#        specific.avro.reader: true
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.LongSerializer
#      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
#    streams:
#      properties:
#        application.id: stock
#        bootstrap.servers: pkc-6ojv2.us-west4.gcp.confluent.cloud:9092
#        schema.registry.url: http://pkc-6ojv2.us-west4.gcp.confluent.cloud:8081
#        default.key.serde: org.apache.kafka.common.serialization.Serdes$LongSerde
#        default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
#        num.standby.replicas: 1
#        num.stream.threads: 2
#        max.request.size: 8388608        # 84 MiB
#        topic.max.message.bytes: 8388608 # 84 MiB
#        topology.optimization: all
#        state.dir: /tmp/kafka-streams-test
#      application-id: stock
  output.ansi.enabled: ALWAYS
  cloud:
    discovery:
      enabled: false
  datasource:
    url: jdbc:h2:mem:product-app;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    platform: h2
    driverClassName: org.h2.Driver
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    show-sql: false
    generate-ddl: true
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        show_sql: false
        use_sql_comments: true
        format_sql: true
  application:
    name: "product"
# spring:
#   jpa:
#     database: POSTGRESQL
#     show-sql: true
#     generate-ddl: true
#     hibernate:
#       ddl-auto: update
#     database-platform: org.hibernate.dialect.PostgreSQL9Dialect
#     properties:
#       hibernate:
#         temp:
#           use_jdbc_metadata_defaults: false
#     open-in-view: false
#   datasource:
#     url: jdbc:postgresql://localhost:5432/product
#     username: postgres
#     password: secset

logging:
  level:
    org.springframework.data: DEBUG
    org.springframework.boot.autoconfigure: ERROR
    org.springframework.web.reactive: DEBUG