plugins {
    id("org.springframework.boot") version "2.5.2"
    id("io.spring.dependency-management") version '1.0.11.RELEASE'
    id("java")
}

ext {
    logbackVersion = '6.4'
    kafkaVersion = '2.6.0'
    lombokVersion = '1.18.20'
    jacksonVersion = '2.12.1'
    confluentVersion = '4.1.0'
    hazelcastJetVersion = '4.3'
    hazelcastSpringVersion = '4.1.1-SNAPSHOT'
    springRetryVersion = '1.3.0'
    jaywayJsonPathVersion = '2.4.0'
    swaggerUIVersion = '1.5.0'
    jedisVersion = '3.5.0'
    mockitoVersion = '3.7.7'
    hibernatesCacheVersion = '5.4.31.Final'
    gsonVersion = '2.8.6'
    springCloudVersion = '2020.0.3'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
}

dependencies {
    /* Spring Boot WebFlux */
    implementation ("org.springframework.boot:spring-boot-starter-webflux") {
        exclude group: 'org.eclipse.jetty'
    }
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    /* Spring Cloud Config */
    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"

    /* JPA */
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.data:spring-data-jpa"

    implementation 'com.h2database:h2:1.4.200'
    implementation 'org.postgresql:postgresql:42.2.11'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    /* Hibernates */
    implementation "org.hibernate:hibernate-ehcache:${hibernatesCacheVersion}"

    /*GSON*/
    implementation "com.google.code.gson:gson:${gsonVersion}"

    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.9.0'
    testImplementation 'io.projectreactor:reactor-test:3.3.4.RELEASE'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'

    /* Lombok */
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

}

group = 'com.metao.product.cart'
version = '0.0.1-SNAPSHOT'
description = 'cart-service'
sourceCompatibility = '16'

springBoot {
    buildInfo()
}

bootJar {
    archiveName "retails-ms-${project.version}.jar"
    launchScript()
}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
